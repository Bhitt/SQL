SQL Syntax and Variations:
	Implicit and explicit joins are shown below. These two statements are equivalent, and it's a
	matter of personal preference which one you choose.

	Explicit Join:
		SELECT CourseName, TeacherName
		FROM Courses INNER JOIN Teachers
		ON Courses.TeacherID = Teachers.TeacherID


	Implicit Join:
		SELECT CourseName, TeacherName
		FROM Courses, Teachers
		WHERE Courses.TeacherID = Teachers.TeacherID

Denormalized vs. Normalized Databases:
	Normalized databases are designed to minimize redundancy, while denormalized databases are 
	designed to optimize read time.

SQL Statements:
	
	(Using an example database, * indicates a primary key)
	Courses: CourseID*, CourseName, TeacherID
	Teachers: TeacherID*, TeacherName
	Students: StudentID*, StudentName
	StudentCourses: CourseID*, StudentID*

	Query 1: Get a list of all students and how many courses they are each enrolled in.

	Sample Solution:
		SELECT max(StudentName) as [StudentName], Students.StudentID,
			   count(StudentCourses.CourseID) as [Count]
		FROM Students LEFT JOIN StudentCourses
		ON Students.StudentID = StudentCourses.StudentID
		GROUP BY Students.StudentID


	Query 2: Get a list of all teachers and how many students they each teach. If a teacher teaches
		the same student in two courses, you should double count the student. Sort the list in
		descending order of the number of students a teacher teaches.

	Sample Solution:
		SELECT TeacherName, isNull(StudentSize.Number, 0)
		FROM Teachers LEFT JOIN
			(SELECT TeacherID, count(StudentCourses.CourseID) AS [Number]
			FROM Courses INNER JOIN StudentCourses
			ON Courses.CourseID = StudentCourses.CourseID
		ON Teachers.TeacherID = StudentSize.Teacher.ID
		ORDER BY StudentSize.Number DESC

Small Database Design:
	Step 1: Handle Ambiguity (imagining an apartment rental agency: are there multiple locations, can
	a person rent two separate apartments in the same building? etc)

	Step 2: Define Core Objects (in this case it could be: Property, Building, Apartment, Tenant and
	Manager).

	Step 3: Analyze Relationships (one-to-many, many-to-many?)

	Step 4: Investigative Actions (walk through common actions and understand how to store and 
	retrieve the data)

Tables:
	A database is just a bunch of tables.
	Tables hold a collection of related data.
	Columns (or Headers) are the components of data.
	Rows are the actual data in the table.

Common Data Types:
	INT : integer number signed
	INT UNSIGNED : integer number unsigned (ie only positive values)
	CHAR : a fixed length string
		- faster
		- will truncate strings that are too long
		- will pad strings that are too short, then remove padding when retrieved
	VARCHAR : a variable length string
		- you can specify a max characterss
	DECIMAL(M, D) : 
		- M : max digits total (precision, range from 1 to 65)
		- D : number of digits to the right of decimal (0 to 30)
	FLOAT :
		- precise up to ~7 digits
		- this is less than c#, c++, java, etc
		- 4 bytes of memory
	DOUBLE :
		- precise up to ~15 digits
		- this is less than c#, c++, java, etc
		- 8 bytes of memory
	DATE : date but no time
		- format 'YYYY-MM-DD'
		- CURDATE() can be used to fetch the current date
	TIME : time but no date
		- format 'HH:MM:SS'
		- CURTIME() can be used to fetch the current time
	DATETIME :
		- format 'YYYY-MM-DD HH:MM:SS'
		- NOW() can be used to fetch the current datetime

Execution Note:
	Code won't run until you type the ';'
	This is an easy piece to miss while giving instructions.

NOT NULL:
	If you want a piece of data to be required, you specify NOT NULL on the table creation.
	For example:
		CREATE TABLE cats (name VARCHAR(100) NOT NULL, age INT NOT NULL);
	Any insertions without the required data will use the specified default value.
	If NOT NULL is used in combination with DEFAULT, the insertion will not allow a purposeful NULL
		value. For example, it wouldn't allow: INSERT INTO cats (name,age) VALUES ('Cali', NULL);

PRIMARY KEY:
	Primary key is used to specify when items need to be unique. For instance, you can have 3 cats
		that share the same name. To grab a specific cat, you would use something like a cat_id 
		which would be specified as a primary key. Every cat_id will be unique if it is specified
		as a primary key.

Aliases:
	Aliases are used to rename data.
	For example:
		SELECT name AS 'cat name' FROM cats;
	The above example can help clarify in an instance where you are also fetching name FROM dogs.

Command Line Interface:
	- if you want to run mysql cli from another directory, first path to the desired directory, then
	run the command: 
		mysql -u userName -p
	and enter the password when prompted. (Note: you have to have added the MYSQL bin directory path
	to the PATH environment variable).

Useful MYSQL string functions:
	CONCAT (<column>,'text',<column>,' ', <column>,...)
		- combines data (columns, text, spaces, etc.)
	SUBSTRING (<string>, startIndex, endIndex)
		- returns the substring
		- indexing starts at 1 instead of 0
		- can use negative indexing to start at the end of the string
	REPLACE(<string>, <substring>, <replacement>)
		- replaces a part of the query with a specified replacement
	REVERSE(<string>)
		- reverses the query
	CHAR_LENGTH(<string>)
		- counts the characters in the string
	UPPER(<string>)
		- converts to upper case
	LOWER(<string>)
		- converts to lower case

