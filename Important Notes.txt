SQL Syntax and Variations:
	Implicit and explicit joins are shown below. These two statements are equivalent, and it's a
	matter of personal preference which one you choose.

	Explicit Join:
		SELECT CourseName, TeacherName
		FROM Courses INNER JOIN Teachers
		ON Courses.TeacherID = Teachers.TeacherID

	Implicit Join:
		SELECT CourseName, TeacherName
		FROM Courses, Teachers
		WHERE Courses.TeacherID = Teachers.TeacherID

Denormalized vs. Normalized Databases:
	Normalized databases are designed to minimize redundancy, while denormalized databases are 
	designed to optimize read time.

SQL Statements:
	
	(Using an example database, * indicates a primary key)
	Courses: CourseID*, CourseName, TeacherID
	Teachers: TeacherID*, TeacherName
	Students: StudentID*, StudentName
	StudentCourses: CourseID*, StudentID*

	Query 1: Get a list of all students and how many courses they are each enrolled in.

	Sample Solution:
		SELECT max(StudentName) as [StudentName], Students.StudentID,
			   count(StudentCourses.CourseID) as [Count]
		FROM Students LEFT JOIN StudentCourses
		ON Students.StudentID = StudentCourses.StudentID
		GROUP BY Students.StudentID


	Query 2: Get a list of all teachers and how many students they each teach. If a teacher teaches
		the same student in two courses, you should double count the student. Sort the list in
		descending order of the number of students a teacher teaches.

	Sample Solution:
		SELECT TeacherName, isNull(StudentSize.Number, 0)
		FROM Teachers LEFT JOIN
			(SELECT TeacherID, count(StudentCourses.CourseID) AS [Number]
			FROM Courses INNER JOIN StudentCourses
			ON Courses.CourseID = StudentCourses.CourseID
		ON Teachers.TeacherID = StudentSize.Teacher.ID
		ORDER BY StudentSize.Number DESC

Small Database Design:
	Step 1: Handle Ambiguity (imagining an apartment rental agency: are there multiple locations, can
	a person rent two separate apartments in the same building? etc)

	Step 2: Define Core Objects (in this case it could be: Property, Building, Apartment, Tenant and
	Manager).

	Step 3: Analyze Relationships (one-to-many, many-to-many?)

	Step 4: Investigative Actions (walk through common actions and understand how to store and 
	retrieve the data)

Tables:
	A database is just a bunch of tables.
	Tables hold a collection of related data.
	Columns (or Headers) are the components of data.
	Rows are the actual data in the table.

Common Data Types:
	INT : integer number signed
	INT UNSIGNED : integer number unsigned (ie only positive values)
	CHAR : a fixed length string
		- faster
		- will truncate strings that are too long
		- will pad strings that are too short, then remove padding when retrieved
	VARCHAR : a variable length string
		- you can specify a max characterss
	DECIMAL(M, D) : 
		- M : max digits total (precision, range from 1 to 65)
		- D : number of digits to the right of decimal (0 to 30)
	FLOAT :
		- precise up to ~7 digits
		- this is less than c#, c++, java, etc
		- 4 bytes of memory
	DOUBLE :
		- precise up to ~15 digits
		- this is less than c#, c++, java, etc
		- 8 bytes of memory
	DATE : date but no time
		- format 'YYYY-MM-DD'
		- CURDATE() can be used to fetch the current date
	TIME : time but no date
		- format 'HH:MM:SS'
		- CURTIME() can be used to fetch the current time
	DATETIME :
		- format 'YYYY-MM-DD HH:MM:SS'
		- NOW() can be used to fetch the current datetime

	TIMESTAMP :
		- same as DATETIME but smaller memory and smaller range
		- useful for comments

Execution Note:
	Code won't run until you type the ';'
	This is an easy piece to miss while giving instructions.

NOT NULL:
	If you want a piece of data to be required, you specify NOT NULL on the table creation.
	For example:
		CREATE TABLE cats (name VARCHAR(100) NOT NULL, age INT NOT NULL);
	Any insertions without the required data will use the specified default value.
	If NOT NULL is used in combination with DEFAULT, the insertion will not allow a purposeful NULL
		value. For example, it wouldn't allow: INSERT INTO cats (name,age) VALUES ('Cali', NULL);

PRIMARY KEY:
	Primary key is used to specify when items need to be unique. For instance, you can have 3 cats
		that share the same name. To grab a specific cat, you would use something like a cat_id 
		which would be specified as a primary key. Every cat_id will be unique if it is specified
		as a primary key.

Aliases:
	Aliases are used to rename data.
	For example:
		SELECT name AS 'cat name' FROM cats;
	The above example can help clarify in an instance where you are also fetching name FROM dogs.

Command Line Interface:
	- if you want to run mysql cli from another directory, first path to the desired directory, then
	run the command: 
		mysql -u userName -p
	and enter the password when prompted. (Note: you have to have added the MYSQL bin directory path
	to the PATH environment variable).

Useful MYSQL string functions:
	CONCAT (<column>,'text',<column>,' ', <column>,...)
		- combines data (columns, text, spaces, etc.)
	SUBSTRING (<string>, startIndex, endIndex)
		- returns the substring
		- indexing starts at 1 instead of 0
		- can use negative indexing to start at the end of the string
	REPLACE(<string>, <substring>, <replacement>)
		- replaces a part of the query with a specified replacement
	REVERSE(<string>)
		- reverses the query
	CHAR_LENGTH(<string>)
		- counts the characters in the string
	UPPER(<string>)
		- converts to upper case
	LOWER(<string>)
		- converts to lower case

Logical Operators :

	NOT LIKE <regex> : Doesn't match given regular expression

	&& is written as AND

	BETWEEN <expr> AND <expr> : returns values between the specified expressions

	NOT BETWEEN : gets everything outside of the range

	WHERE <column name> IN (<value>, <value>, <value>) : looks for matches to the multiple values, 
		rather than writing them all out
		- for example: 

		SELECT title, author_lname 
			FROM books
				WHERE author_lname='Carver' OR
      					author_lname='Lahiri' OR
      					author_lname='Smith';

      			{the above is now written as:}
 
		SELECT title, author_lname FROM books
		WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');

	Switch example : 
		SELECT title, stock_quantity,
		    CASE 
		        WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
		        WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
		        ELSE '***'
		    END AS STOCK
		FROM books;

	IFNULL(<argument>, <default value>) :
		- handles null cases for situations such as summing numbers (where numbers may be null).

Foreign Keys : A way to reference other tables for relationships.
	Example: 
		CREATE TABLE customers(
		    id INT AUTO_INCREMENT PRIMARY KEY,
		    first_name VARCHAR(100),
		    last_name VARCHAR(100),
		    email VARCHAR(100)
		);
		CREATE TABLE orders(
		    id INT AUTO_INCREMENT PRIMARY KEY,
		    order_date DATE,
		    amount DECIMAL(8,2),
		    customer_id INT,
		    FOREIGN KEY(customer_id) REFERENCES customers(id)
		);
	This relationship is one-to-many since a customer can have more than one order but each order
	can only have one customer.

	Foreign Keys also prevent deleting data that is dependent on another piece of data. For instance,
	if you had an order (that contains a customer), an error will be thrown if you try to delete the
	data referencing the customer object.

Joins:
	
	Implicit Cross Join: 
		SELECT * FROM <tablename>, <tablename>;

		Cross joins are basically Cartesian products of the rows from the listed tables. So table
		1 rows multiplied by table 2 rows.... and so on.

	Implicit Inner Join:
		SELECT first_name, last_name, order_date, amount
		FROM customers, orders 
		    WHERE customers.id = orders.customer_id;

		Inner joins are similar to the center of a venn diagram. It returns the items that match
		between tables (also known as the intersection : A & B).

	Explicit Inner Join:
		SELECT first_name, last_name, order_date, amount 
		FROM customers
		JOIN orders
		    ON customers.id = orders.customer_id;

		An explicit inner join is the same as an implicit inner join except that it is more legible
		and follows convention. It is better practice to use explicit joins.

	Explicit Left Join:
	 	SELECT 
		    first_name, 
		    last_name,
		    IFNULL(SUM(amount), 0) AS total_spent
		FROM customers
		LEFT JOIN orders
		    ON customers.id = orders.customer_id
		GROUP BY customers.id
		ORDER BY total_spent;

		Left join selects everything from A along with the intersection of A & B.

	Explicit Right Join:

		Same as left join except now it selects everything from B along with the intersection of 
		A & B. May be easier to just stick to left joins only.

