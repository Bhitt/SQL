show databases;
	- shows the databases

-------------------------

CREATE DATABASE <name>;
	- creates a database with the given name
	- do not include <>
	- recommended to write name in snake case : database_name

-------------------------

DROP DATABASE <name>;
	- deletes the database
	- be careful with this command

-------------------------

USE <database name>;
	- switches to a database to perform actions on
	- useful for switching between databases

-------------------------

SELECT database();
	- tells you which database is being used
	- returns null if no database is in use

-------------------------

CREATE TABLE tablename
	(
		column_name datatype,
		column_name datatype
	);


	- table names should be pluralized (ie 'cats')

-------------------------

SHOW TABLES;
	- shows the tables in the db
	- does not show the information/details for the tables

-------------------------

SHOW COLUMNS FROM <table name>;
	- gives the description of a table's columns (headers)
	- another method to achieve this is the command: DESC <table name>;

-------------------------

DESC <table name>;
	- similar to SHOW COLUMNS FROM <table name>;
	- minor differences

-------------------------

DROP TABLE <table name>;
	- deletes a table
	- be careful with this command

-------------------------

INSERT INTO <table name> 
	(
	<column name>, 
	<column name>
	)
VALUES	
	(
		<value>,
		<value>
	);


	- inserts values into a table
	- the order matters
	- can insert multiple values at the same time:
		VALUES (<value>,<value>),(<value>,<value>),(<value>,<value>);

-------------------------

SELECT * FROM <table name>;
	
	- shows all data from table

-------------------------

SELECT <column name>, <column name> FROM <table name>;
	
	- gives back the data from one or more specific columns
	- results are returned in the order that was requested

-------------------------

UPDATE <table name> SET <list of changes> WHERE <items to change>;

	- updates selected data with changes
	- For example:
		UPDATE cats SET age=14
		WHERE name='Misty';
	- The above changes any cat named 'Misty' to have the age 14
	- A good habit is to first select the necessary data before updating to make sure you are 
		updating the correct data.

-------------------------

DELETE FROM <table name> WHERE <items to delete>;
	
	- delete selected data
	- For example:
		DELETE FROM cats WHERE name='egg';
	- The above removes a cat named 'egg' from the table
	- Similar to Update, a good habit is to first make sure you select the right data, then do the
		delete.


DELETE FROM <table name>;
	
	- just deletes the entries in the table without removing the table

-------------------------

WHERE
	
	- specifies what type of data you are interacting with
	- allows you to be more specific during queries, updates, and deletes
	- For example:
		SELECT * FROM cats WHERE name='Snowball';
	- by default WHERE is case-insensitive

-------------------------

AS
	
	- renames the data that is fetched
	- For example:
		SELECT name AS 'cat name', breed AS 'kitty breed' FROM cats;
	- The above example would list the column as 'cat name' instead of 'name'.

-------------------------

SHOW WARNINGS;

	- will alert you to any problems
	- an example would be if an inserted string was truncated to a smaller size and data was lost.
	- another example is trying to store a string in an INT

-------------------------

	(option)
NOT NULL
	- used when creating a table, listed after the data type.
	- makes the data required, will use the default if no data is given instead of NULL
	- For example:
		CREATE TABLE cats (name VARCHAR(100) NOT NULL, age INT NOT NULL);

-------------------------

	(option)
DEFAULT <new default value>
	- used when creating a table, sets a new default value for the data
	- For example:
		CREATE TABLE cats (name VARCHAR(100) DEFAULT 'no name provided', age INT DEFAULT 99);

-------------------------

	(option)
PRIMARY KEY (<column name>)
	- used to keep data entry unique (usernames, id, etc)
	- For example:
		CREATE TABLE cats (cat_id INT NOT NULL, name VARCHAR(100), PRIMARY KEY (cat_id));
	- Can also be specified as such:
		CREATE TABLE cats (cat_id INT NOT NULL PRIMARY KEY, name VARCHAR(100));

-------------------------

	(option)
AUTO_INCREMENT
	- used for pieces of data that are automated (such as id)
	- For example:
		CREATE TABLE cats (cat_id INT NOT NULL AUTO_INCREMENT, name VARCHAR(100));


-------------------------

source <file>;
	- opens and runs an SQL file
	- make sure the path is correct (and include filetype .sql)
	- if you want to run mysql cli from another directory, first path to the desired directory, then
	run the command: 
		mysql -u userName -p
	and enter the password when prompted. (Note: you have to have added the MYSQL bin directory path
	to the PATH environment variable).

-------------------------

CONCAT (<column> , ' ', <column>) FROM <table name>;
	- returns items concatenated together
	- For example:
			CONCAT(author_fname, ' ', author_lname) FROM books;

-------------------------

SUBSTRING(<string>, startIndex, endIndex);
	- returns the substring from startIndex to endIndex
	- NOTE: MYSQL indexing starts at 1 not 0
	- For example:
			SUBSTRING('Hello World', 1, 5);
	- The above returns 'Hello'
	- Another use:
			SUBSTRING('Hello World',7);
	- The above returns 'World'
	- Substring can also use negative indexing to start at the end
	- For example: 
			SUBSTRING('Hello World', -3);
	- The above returns 'rld'

-------------------------

REPLACE(<string>, <substring>, <replacement>);
	- returns the string with replacements
	- For example:
			REPLACE('Hello World', 'Hell', '%$#@');
	- The above returns '%$#@o World'
	- This only affects the query output, not the data itself
	- Replace is case-sensitive

-------------------------

DISTINCT <query>, <query>, ... FROM <table name>;
	- removes duplicates
	- can work on a combination of data (such as distinct first and last names)
	- For example:
			DISTINCT author_fname, author_lname FROM books;

-------------------------

<query> FROM <table name> ORDER BY <column name>;
	- orders the query output
	- ascending by default
	- descending is accomplished with <column name> DESC
	- For example:
		SELECT title FROM books ORDER BY title;

-------------------------

<query> FROM <table name> LIMIT <amount>;
	- returns a limited amount of items
	- For example:
		SELECT title FROM books LIMIT 3;
	- Indexing starts at 0
	- You can specify a starting index and then the limit length
	- The limit length (or amount) can be a very large number to grab all

-------------------------

<query> FROM <table name> WHERE <column name> LIKE <regex>;
	- uses regex to narrow down a search
	- For example:
		SELECT title FROM books WHERE title LIKE '%the%';
	- The above returns book titles with 'the' somewhere in it.
	- '%' acts as a wildcard for anything
	- '_' acts as a wildcard for anything that is one character in length (you can use multiple
	underscores to match a specific length)

-------------------------

COUNT(<query>) FROM <table name>;
	- returns the number of items
	- COUNT(DISTINCT <query>) : will return the count without duplicates
	- Some Examples:
		SELECT COUNT(*) FROM books; // returns the count of all books

		SELECT COUNT(author_fname) FROM books; // returns the count of first names (including 
		counting the duplicates)

		SELECT COUNT(DISTINCT author_lname) FROM books; // returns the count of last names 
		without counting duplicates)

-------------------------

SELECT <query> FROM <table name> GROUP BY <grouping method>;
	- groups the information into specified groups
	- for instance, you can group items by the same author
	- meant to be used in combination with other aggregate functions
	- For example:
		SELECT released_year, COUNT(*) FROM books GROUP BY released_year;
	- The above returns the count of books released for each year

-------------------------

MIN(<query>) FROM <table name>;
	- returns the minimum value from the query

MAX(<query>) FROM <table name>;
	- returns the maximum value from the query

	- use either MIN or MAX in combination with GROUP BY for better queries
	- For Example:
		SELECT 
			author_fname, author_lname, MAX(pages) 
		FROM books
		GROUP BY author_lname,
				 author_fname;
	- The above returns a list of authors with the longest book (by page count) that they've written

-------------------------

SUM(<query>) FROM <table name>;
	- returns the sum of the values queried
	- For exmaple:
		SELECT author_fname,
		       author_lname,
		       Sum(pages)
		FROM books
		GROUP BY
		    author_lname,
		    author_fname;
	- The above returns the sum of pages written by each author across their books

-------------------------
AVG(<query>) FROM <table name>;
	- returns the average of the queried values
	- For Example:
		SELECT released_year, AVG(stock_quantity)
		FROM books
		GROUP BY released_year;
	- The above returns the release year and the average stock quantity for that year
